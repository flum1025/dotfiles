[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc'
build = 'make'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  let g:NERDTreeShowHidden=1
  let g:NERDTreeWinSize = 20
  nnoremap <silent><C-e> :NERDTreeToggle<CR>
  nnoremap <F9> :NERDTree ~/Downloads<CR>
  nnoremap <F8> :NERDTree ~/Desktop<CR>
  noremap dir :NERDTree<CR>
  nnoremap sd :<C-u>tabnew<CR>:NERDTree<CR>
  let g:NERDTreeIgnore=['\.DS_Store$']
'''

[[plugins]]
repo = 'joshdick/onedark.vim'

[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
let g:neoterm_default_mod = 'botright'
let g:neoterm_automap_keys = ',tt'
let g:neoterm_autoinsert = 1
let g:neoterm_size = 25
nnoremap <C-k> :Ttoggle<CR>
inoremap <C-k> <ESC>:Ttoggle<CR>
tnoremap <C-k> <C-\><C-n>:Ttoggle<CR>
tnoremap <silent> <ESC> <C-\><C-n>
tnoremap <silent> jj <C-\><C-n>
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  call RequirePlugin('lightline.vimrc')
'''

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
  call submode#enter_with('bufmove', 'n', '', 's>', '<C-w>>')
  call submode#enter_with('bufmove', 'n', '', 's<', '<C-w><')
  call submode#enter_with('bufmove', 'n', '', 's+', '<C-w>+')
  call submode#enter_with('bufmove', 'n', '', 's-', '<C-w>-')
  call submode#map('bufmove', 'n', '', '>', '<C-w>>')
  call submode#map('bufmove', 'n', '', '<', '<C-w><')
  call submode#map('bufmove', 'n', '', '+', '<C-w>+')
  call submode#map('bufmove', 'n', '', '-', '<C-w>-')
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'vim-scripts/AnsiEsc.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'fuenor/qfixgrep'
hook_add = '''
  if executable('rg')
    let mygrepprg='rg'
    let MyGrepcmd_useropt='-nH --no-heading --color never'
    let MyGrepcmd_regexp=''
    let MyGrepcmd_regexp_ignore='-i'
    let MyGrepcmd_fix='-F'
    let MyGrepcmd_fix_ignore='-F -i'
    let MyGrepcmd_recursive=''
    let MyGrep_GrepFilePattern='.'
    let MyGrep_DefaultSearchWord = 0
  endif
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'
hook_add = '''
  nmap <C-p> :Denite neoyank<CR>
'''

[[plugins]]
repo = 'glidenote/memolist.vim'
hook_add = '''
  call RequirePlugin('memolist.vimrc')
'''

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'Konfekt/FastFold'
hook_source = '''
  let g:tex_fold_enabled=1
  let g:vimsyn_folding='af'
  let g:xml_syntax_folding = 1
  let g:php_folding = 1
  let g:perl_fold = 1
'''

[[plugins]]
repo = 'ConradIrwin/vim-bracketed-paste'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  let g:quickrun_config = {
  \   '*': {'runmode': 'async:remote:vimproc'},
  \ }

  noremap <F4> :QuickRun<CR>
  inoremap <F4> <Esc>:QuickRun<CR>
'''

[[plugins]]
repo = 'w0rp/ale'
if = "(has('job') && has('channel') && has('timers')) || has('nvim')"
hook_add = '''
  call RequirePlugin('ale.vimrc')
'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
depends = 'deoplete.nvim'
on_ft = ['rust']
build = './install.sh'
hook_source = '''
set hidden
let g:LanguageClient_serverCommands = {
    \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
    \ }
let g:LanguageClient_autoStart = 1
nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>
'''

[[plugins]]
repo = 'vim-scripts/taglist.vim'
hook_add = '''
  if has("osx")
    let Tlist_Ctags_Cmd = "/usr/local/bin/ctags"
  elseif has("unix")
    let Tlist_Ctags_Cmd = "/usr/bin/ctags"
  endif
  let Tlist_Show_One_File = 1
  let Tlist_Use_Right_Window = 1
  let Tlist_Exit_OnlyWindow = 1
  nmap <silent> <leader>tl :TlistToggle<CR>
'''

[[plugins]]
repo = 'osyo-manga/vim-over'
hook_add = '''
" over.vimの起動
nnoremap <silent> <Leader>m :OverCommandLine<CR>
" カーソル下の単語をハイライト付きで置換
nnoremap sub :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>
" コピーした文字列をハイライト付きで置換
nnoremap subp y:OverCommandLine<CR>%s!<C-r>=substitute(@0, '!', '\\!', 'g')<CR>!!gI<Left><Left><Left>
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
hook_add = '''
  let g:precious_enable_switch_CursorMoved = { '*': 0, 'help': 1 }
  augroup MyAutoCmd
    autocmd!
    " Toggle on insert
    autocmd InsertEnter * :PreciousSwitch
    autocmd InsertLeave * :PreciousReset
  augroup END
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'

[[plugins]]
repo = 'junegunn/fzf'
hook_post_update = '''
  if !isdirectory(expand('~/.fzf'))
    execute '!git clone https://github.com/junegunn/fzf.git ~/.fzf'
    execute '!~/.fzf/install --all'
  endif
'''
hook_add = '''
  noremap <silent>fzf :call FZFHFilesFunc()<CR>
  nnoremap <leader>f :call FZFJumpFileFunc(expand("<cfile>"))<CR>
  vnoremap <leader>f :call FZFJumpFileFunc(GetSelectionText())<CR>
  call RequirePlugin('fzf.vimrc')
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = 'neomru.vim'
if = 'has("nvim")'
hook_add = '''
  nnoremap <silent> ,b :<C-u>Denite buffer<CR>
'''

[[plugins]]
repo = 'vim-scripts/open-browser.vim'
hook_add = '''
  let g:netrw_nogx = 1
  nmap gx <Plug>(openbrowser-smart-search)
  vmap gx <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'tyru/open-browser-github.vim'
depends = 'open-browser.vim'
hook_add = '''
  let g:openbrowser_github_url_exists_check = 'ignore'
'''

[[plugins]]
repo = 'terryma/vim-multiple-cursors'
hook_add = '''
  call RequirePlugin('vim-multiple-cursors.vimrc')
'''

[[plugins]]
repo = 'nicwest/vim-camelsnek'
