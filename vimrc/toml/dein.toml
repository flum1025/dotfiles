[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc'
build = 'make'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  let g:NERDTreeShowHidden=1
  let g:NERDTreeWinSize = 20
  nnoremap <silent><C-e> :NERDTreeToggle<CR>
  nnoremap <F9> :NERDTree ~/Downloads<CR>
  nnoremap <F8> :NERDTree ~/Desktop<CR>
  noremap dir :NERDTree<CR>
  nnoremap sd :<C-u>tabnew<CR>:NERDTree<CR>
  let g:NERDTreeIgnore=['\.DS_Store$']
'''

[[plugins]]
repo = 'joshdick/onedark.vim'

[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
let g:neoterm_default_mod = 'botright'
let g:neoterm_automap_keys = ',tt'
let g:neoterm_autoinsert = 1
let g:neoterm_size = 25
nnoremap <C-k> :Ttoggle<CR>
inoremap <C-k> <ESC>:Ttoggle<CR>
tnoremap <C-k> <C-\><C-n>:Ttoggle<CR>
tnoremap <silent> <ESC> <C-\><C-n>
tnoremap <silent> jj <C-\><C-n>
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  call RequirePlugin('lightline.vimrc')
'''

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'szw/vim-tags'
hook_add = '''
  :set tags=./tags;

  augroup AlpacaTags
    autocmd!
    if exists(':Tags')
      autocmd BufWritePost Gemfile TagsBundle
      autocmd BufEnter * TagsSet
      " 毎回保存と同時更新する場合はコメントを外す
      autocmd BufWritePost * TagsUpdate
    endif
  augroup END

  nnoremap <C-h> :vsp<CR> :exe("tjump ".expand('<cword>'))<CR>
  nnoremap <C-k> :split<CR> :exe("tjump ".expand('<cword>'))<CR>
'''

[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
  call submode#enter_with('bufmove', 'n', '', 's>', '<C-w>>')
  call submode#enter_with('bufmove', 'n', '', 's<', '<C-w><')
  call submode#enter_with('bufmove', 'n', '', 's+', '<C-w>+')
  call submode#enter_with('bufmove', 'n', '', 's-', '<C-w>-')
  call submode#map('bufmove', 'n', '', '>', '<C-w>>')
  call submode#map('bufmove', 'n', '', '<', '<C-w><')
  call submode#map('bufmove', 'n', '', '+', '<C-w>+')
  call submode#map('bufmove', 'n', '', '-', '<C-w>-')
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'vim-scripts/AnsiEsc.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'fuenor/qfixgrep'
hook_add = '''
  if executable('rg')
    let mygrepprg='rg'
    let MyGrepcmd_useropt='-nH --no-heading --color never'
    let MyGrepcmd_regexp=''
    let MyGrepcmd_regexp_ignore='-i'
    let MyGrepcmd_fix='-F'
    let MyGrepcmd_fix_ignore='-F -i'
    let MyGrepcmd_recursive=''
    let MyGrep_GrepFilePattern='.'
    let MyGrep_DefaultSearchWord = 0
  endif
'''

[[plugins]]
repo = 'LeafCage/yankround.vim'
hook_add = '''
  nmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap gp <Plug>(yankround-gp)
  nmap gP <Plug>(yankround-gP)
  nmap <C-p> <Plug>(yankround-prev)
  nmap <C-n> <Plug>(yankround-next)
'''

[[plugins]]
repo = 'glidenote/memolist.vim'
hook_add = '''
  call RequirePlugin('memolist.vimrc')
'''

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'Konfekt/FastFold'
hook_source = '''
  let g:tex_fold_enabled=1
  let g:vimsyn_folding='af'
  let g:xml_syntax_folding = 1
  let g:php_folding = 1
  let g:perl_fold = 1
'''

[[plugins]]
repo = 'vim-scripts/open-browser.vim'
hook_add = '''
  let g:netrw_nogx = 1
  nmap gx <Plug>(openbrowser-smart-search)
  vmap gx <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'ConradIrwin/vim-bracketed-paste'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  let g:quickrun_config = {
  \   '*': {'runmode': 'async:remote:vimproc'},
  \ }

  noremap <F4> :QuickRun<CR>
  inoremap <F4> <Esc>:QuickRun<CR>
'''

[[plugins]]
repo = 'w0rp/ale'
if = "(has('job') && has('channel') && has('timers')) || has('nvim')"
hook_add = '''
  let g:ale_enabled = 1
  let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
  let g:ale_fix_on_save = 1
  let g:ale_lint_on_enter = 0
  let g:ale_lint_on_text_changed = 'never'

  let g:ale_set_loclist = 0
  let g:ale_set_quickfix = 0
  let g:ale_open_list = 0
  let g:ale_keep_list_window_open = 0

  let g:ale_javascript_prettier_use_local_config = 1
  let g:ale_typescript_tslint_executable = 'eslint'

  let g:ale_go_gometalinter_options = '--fast'

  let g:ale_python_flake8_executable = g:python3_host_prog
  let g:ale_python_flake8_options = '-m flake8'
  let g:ale_python_autopep8_executable = g:python3_host_prog
  let g:ale_python_autopep8_options = '-m autopep8'
  let g:ale_python_isort_executable = g:python3_host_prog
  let g:ale_python_isort_options = '-m isort'
  let g:ale_python_black_executable = g:python3_host_prog
  let g:ale_python_black_options = '-m black'

  let g:ale_fixers = {
  \   'javascript': ['prettier', 'eslint'],
  \   'typescript': ['prettier', 'eslint'],
  \   'vue': ['prettier', 'eslint'],
  \   'ruby': ['rubocop'],
  \   'go': ['gofmt', 'goimports'],
  \   'python': ['autopep8', 'black', 'isort']
  \}

  let g:ale_linters = {
  \   'javascript': ['prettier', 'eslint'],
  \   'typescript': ['prettier', 'eslint'],
  \   'vue': ['prettier', 'eslint'],
  \   'ruby': ['rubocop'],
  \   'go': ['gometalinter'],
  \   'python': ['flake8']
  \}

  let g:lightline = {
    \'active': {
    \  'left': [
    \    ['mode', 'paste'],
    \    ['readonly', 'filename', 'modified'],
    \    ['ale'],
    \  ]
    \},
    \'component_function': {
    \  'ale': 'ALEGetStatusLine'
    \}
  \ }
'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
depends = 'deoplete.nvim'
on_ft = ['rust']
build = './install.sh'
hook_source = '''
set hidden
let g:LanguageClient_serverCommands = {
    \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
    \ }
let g:LanguageClient_autoStart = 1
nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>
'''

[[plugins]]
repo = 'scrooloose/syntastic'
if = "(!has('job') || !has('channel') || !has('timers')) && !has('nvim')"
hook_source = '''
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*

  let g:syntastic_python_checkers = ['']
'''

[[plugins]]
repo = 'thinca/vim-ref'

[[plugins]]
repo = 'vim-scripts/taglist.vim'
hook_add = '''
  if has("osx")
    let Tlist_Ctags_Cmd = "/usr/local/bin/ctags"
  elseif has("unix")
    let Tlist_Ctags_Cmd = "/usr/bin/ctags"
  endif
  let Tlist_Show_One_File = 1
  let Tlist_Use_Right_Window = 1
  let Tlist_Exit_OnlyWindow = 1
  nmap <silent> <leader>tl :TlistToggle<CR>
'''

[[plugins]]
repo = 'osyo-manga/vim-over'
hook_add = '''
" over.vimの起動
nnoremap <silent> <Leader>m :OverCommandLine<CR>
" カーソル下の単語をハイライト付きで置換
nnoremap sub :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>
" コピーした文字列をハイライト付きで置換
nnoremap subp y:OverCommandLine<CR>%s!<C-r>=substitute(@0, '!', '\\!', 'g')<CR>!!gI<Left><Left><Left>
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
hook_add = '''
  let g:precious_enable_switch_CursorMoved = { '*': 0, 'help': 1 }
  augroup MyAutoCmd
    autocmd!
    " Toggle on insert
    autocmd InsertEnter * :PreciousSwitch
    autocmd InsertLeave * :PreciousReset
  augroup END
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'

[[plugins]]
repo = 'junegunn/fzf'
hook_post_update = '''
  if !isdirectory(expand('~/.fzf'))
    execute '!git clone https://github.com/junegunn/fzf.git ~/.fzf'
    execute '!~/.fzf/install --all'
  endif
'''
hook_add = '''
  noremap <silent>fzf :call FZFHFilesFunc()<CR>
  nnoremap <leader>f :call FZFJumpFileFunc(expand("<cfile>"))<CR>
  vnoremap <leader>f :call FZFJumpFileFunc(GetSelectionText())<CR>
  call RequirePlugin('fzf.vimrc')
'''

[[plugins]] # Deprecated
repo = 'Shougo/unite.vim'
depends = 'neomru.vim'
if = '!has("nvim")'
hook_add = '''
  let g:unite_enable_start_insert=1
  let g:unite_source_history_yank_enable =1
  let g:unite_source_file_mru_limit = 200

  nnoremap <silent> ,uy :<C-u>Unite history/yank<CR>
  nnoremap <silent> ,uu :<C-u>Unite file_mru buffer<CR>

  nnoremap <silent> ,g :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
  if executable('pt')
    let g:unite_source_grep_command = 'pt'
    let g:unite_source_grep_default_opts = '--nogroup --nocolor'
    let g:unite_source_grep_recursive_opt = ''
  endif
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = 'neomru.vim'
if = 'has("nvim")'
hook_add = '''
  nnoremap <silent> ,b :<C-u>Denite buffer<CR>
'''

[[plugins]]
repo = 'tyru/open-browser-github.vim'
hook_add = '''
  let g:openbrowser_github_url_exists_check = 'ignore'
'''

[[plugins]]
repo = 'terryma/vim-multiple-cursors'
hook_add = '''
  call RequirePlugin('vim-multiple-cursors.vimrc')
'''

[[plugins]]
repo = 'nicwest/vim-camelsnek'
